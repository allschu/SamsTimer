@using Admin.Shared
@using Microsoft.AspNetCore.Identity

@inject NavigationManager NavigationManager
@inject SignInManager<User> SignInManager

@attribute [StreamRendering]

<RadzenHeader>
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
        <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
        <RadzenLabel Text="Header" />
    </RadzenStack>
</RadzenHeader>
<RadzenSidebar Responsive="false" Style="width: max-content">
    <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="false">
        <RadzenPanelMenuItem Text="Overview" Path="/" Icon="home" />
        <AuthorizeView>
            <Authorized>
                 <RadzenPanelMenuItem Text="Users" Path="users" Icon="person_add" />
                <RadzenPanelMenuItem Text="UI Fundamentals" Icon="auto_awesome">
                    <RadzenPanelMenuItem Text="Themes" Icon="color_lens" />
                    <RadzenPanelMenuItem Text="Colors" Icon="invert_colors" />
                </RadzenPanelMenuItem>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="nav-link">
                        <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                    </button>
                </form>
            </Authorized>
            <NotAuthorized>
                <RadzenPanelMenuItem Text="Login" Path="Account/Login" Icon="security" />
            </NotAuthorized>
        </AuthorizeView>
    </RadzenPanelMenu>
</RadzenSidebar>

@code {
    bool sidebarExpanded = true;
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}